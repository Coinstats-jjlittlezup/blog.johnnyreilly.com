(window.webpackJsonp=window.webpackJsonp||[]).push([[463],{527:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return c}));var r=t(3),o=t(7),i=(t(0),t(960)),a={title:"Setting Build Version Using AppVeyor and ASP.Net Core",author:"John Reilly",author_url:"https://github.com/johnnyreilly",author_image_url:"https://avatars.githubusercontent.com/u/1010525?s=400&u=294033082cfecf8ad1645b4290e362583b33094a&v=4",tags:["powershell","Version","dot net core","AppVeyor"],hide_table_of_contents:!1},l={permalink:"/blog.johnnyreilly.com/2017/04/25/setting-build-version-using-appveyor",editUrl:"https://github.com/johnnyreilly/blog.johnnyreilly.com/edit/main/blog-website/blog/blog/2017-04-25-setting-build-version-using-appveyor.md",source:"@site/blog/2017-04-25-setting-build-version-using-appveyor.md",description:"AppVeyor has support for setting the version of a binary during a build. However - this deals with the classic ASP.Net world of AssemblyInfo. I didn't find any reference to support for doing the same with dot net core. Remember, dot net core relies upon a &lt;Version&gt; or a &lt;VersionPrefix&gt; setting in the .csproj file. Personally, &lt;Version&gt; is my jam.",date:"2017-04-25T00:00:00.000Z",tags:[{label:"powershell",permalink:"/blog.johnnyreilly.com/tags/powershell"},{label:"Version",permalink:"/blog.johnnyreilly.com/tags/version"},{label:"dot net core",permalink:"/blog.johnnyreilly.com/tags/dot-net-core"},{label:"AppVeyor",permalink:"/blog.johnnyreilly.com/tags/app-veyor"}],title:"Setting Build Version Using AppVeyor and ASP.Net Core",readingTime:1.025,truncated:!1,prevItem:{title:"TypeScript: Spare the Rod, Spoil the Code",permalink:"/blog.johnnyreilly.com/2017/05/20/typescript-spare-rod-spoil-code"},nextItem:{title:"I'm looking for work!",permalink:"/blog.johnnyreilly.com/2017/03/30/im-looking-for-work"}},s=[],p={toc:s};function c(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"AppVeyor has ",Object(i.b)("a",{parentName:"p",href:"https://www.appveyor.com/docs/build-configuration/#assemblyinfo-patching"},"support for setting the version of a binary during a build"),". However - this deals with the classic ASP.Net world of ",Object(i.b)("inlineCode",{parentName:"p"},"AssemblyInfo"),". I didn't find any reference to support for doing the same with dot net core. Remember, dot net core ",Object(i.b)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/articles/core/tools/project-json-to-csproj#version"},"relies upon a ",Object(i.b)("inlineCode",{parentName:"a"},"&lt;Version&gt;")," or a ",Object(i.b)("inlineCode",{parentName:"a"},"&lt;VersionPrefix&gt;")," setting in the ",Object(i.b)("inlineCode",{parentName:"a"},".csproj")," file"),". Personally, ",Object(i.b)("inlineCode",{parentName:"p"},"&lt;Version&gt;")," is my jam."),Object(i.b)("p",null," However, coming up with your own bit of powershell that stamps the version during the build is a doddle; here we go:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ps"},'Param($projectFile, $buildNum)\n\n$content = [IO.File]::ReadAllText($projectFile)\n\n$regex = new-object System.Text.RegularExpressions.Regex (\'(<version>)([\\d]+.[\\d]+.[\\d]+)(.[\\d]+)(<\\/Version>)\', \n         [System.Text.RegularExpressions.RegexOptions]::MultiLine)\n\n$version = $null\n$match = $regex.Match($content)\nif($match.Success) {\n    # from "<version>1.0.0.0</version>" this will extract "1.0.0"\n    $version = $match.groups[2].value\n}\n\n# suffix build number onto $version. eg "1.0.0.15"\n$version = "$version.$buildNum"\n\n# update "<version>1.0.0.0</version>" to "<version>$version</version>"\n$content = $regex.Replace($content, \'${1}\' + $version + \'${4}\')\n\n# update csproj file\n[IO.File]::WriteAllText($projectFile, $content)\n\n# update AppVeyor build\nUpdate-AppveyorBuild -Version $version\n</version>\n')),Object(i.b)("p",null,"You can invoke this script as part of the build process in AppVeyor by adding something like this to your ",Object(i.b)("inlineCode",{parentName:"p"},"appveyor.yml"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yml"},"before_build:\n- ps: .\\ModifyVersion.ps1 $env:APPVEYOR_BUILD_FOLDER\\src\\Proverb.Web\\Proverb.Web.csproj $env:APPVEYOR_BUILD_NUMBER\n")),Object(i.b)("p",null,"It will keep the first 3 parts of the version in your ",Object(i.b)("inlineCode",{parentName:"p"},".csproj"),' (eg "1.0.0") and suffix on the build number supplied by AppVeyor.'))}c.isMDXComponent=!0},960:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),c=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,m=u["".concat(a,".").concat(d)]||u[d]||b[d]||i;return t?o.a.createElement(m,l(l({ref:n},p),{},{components:t})):o.a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);